Flow of react execution:
->Initially the jsx -> html and rendered
-> UseEffects are executed.
	Any useEffect that updates the state takes a pause of sorts
-> Since there is state updation in the initial declaration of usestate,
	any useeffects related to those are also executed([])
-> The state update by useeffect in step 2 happens, again the HTML code in the lines where the state is used is re-rendered
-> There is a difference between the virtual DOM(The html with the updated
   state) and the old HTML(DOM)
-> This new change is injected to the DOM
-> Since there is change in state, the useEffects corresponding to those states gets executed. 

When a component gets re rendered the whole component(including the console.log statements) are executed.

onclick functionality
---------------------
This won't work because onclick()(), otherewise function_name should return a function pointer(?)
onclick= {
	function_name()
}
--------------------
won't work!
onclick= {()=>{
	function_name
}}
value for onclick is an arrow function,meaning onclick's function definition which is:
{()=>{
	function_name
}}
when button is clicked this arrow function is triggered.
If the content is just function_name, it makes no sense. It's just a representation of the function
------------------------

Will work.
onclick= {()=>{
	function_name()
}}

-------------------------

Here the function_name is getting assigned to onclick
onclick= {
	function_name
}
onclick() means function_name()

-------------------------

{e} -> e()
onclick={()=>{e}}


function hello(){
	cons..("hello")
}

onclick = {hello}
onclick()  => hello()

function onclick(){

}
onclick={()=>{
	function name
}}

onclick={()=>{
	function_name()
}}

onclick={function_name()}
function function_name(){
	return hello
}

x = 6
x+y

-------------------
* Re rendering will only happen if state of any of the state variable changes.
* For an html element if we use ref, then a ref is assigned to that element.. Whatever is on the RHS of the ref will have the element html.
* if we use a function in ref, the element will be passed as an argument to the function
